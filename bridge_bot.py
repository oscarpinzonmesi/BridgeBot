import os
import json  # ‚¨ÖÔ∏è NECESARIO
import requests
from flask import Flask, request, jsonify
from openai import OpenAI
from pathlib import Path
import tempfile
from gtts import gTTS
from datetime import datetime, timezone, timedelta
import re
import schedule
import threading
import time





app = Flask(__name__)


# =========================
# MEMORIA
# =========================
# Recordar el √∫ltimo chat que habl√≥ con el bot (para alarmas)
LAST_CHAT_ID = None
# Memoria de la √∫ltima agenda listada por chat (para "borra esa")
ULTIMA_AGENDA = {}
PENDIENTE = {}  
# =========================
# CONFIG
# =========================
BRIDGE_TOKEN   = os.getenv("TELEGRAM_TOKEN")          # Token del bot de Telegram
ORBIS_API      = os.getenv("ORBIS_API")               # URL de Orbis: https://.../procesar
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")          # API Key de OpenAI

TELEGRAM_API = f"https://api.telegram.org/bot{BRIDGE_TOKEN}"
BRIDGE_API   = f"{TELEGRAM_API}/sendMessage"

# Cliente OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# =========================
# Hora local de Bogot√° (contexto para MesaGPT)
# =========================
def ahora_bogota():
    return datetime.now(timezone.utc) - timedelta(hours=5)
def fecha_bogota(delta_dias=0) -> str:
    return (ahora_bogota() + timedelta(days=delta_dias)).strftime("%Y-%m-%d")

def es_si(texto: str) -> bool:
    t = re.sub(r"[^\w√°√©√≠√≥√∫√º√±\s]", " ", texto or "").strip().lower()
    candidatos = {"si","s√≠","claro","ok","dale","hagale","h√°gale","de una","correcto","afirmativo","por favor","okay","vale"}
    return any(tok in candidatos for tok in t.split())

def es_no(texto: str) -> bool:
    t = re.sub(r"[^\w√°√©√≠√≥√∫√º√±\s]", " ", texto or "").strip().lower()
    candidatos = {"no","nel","negativo","mejor no","nop","nopes"}
    return any(tok in candidatos for tok in t.split())

def normalizar_manjana(texto: str) -> str:
    # Corrige variantes comunes: 'manana', 'ma√±an', 'ma√±na', etc.
    t = texto
    t = re.sub(r"\bmanana\b", "ma√±ana", t, flags=re.IGNORECASE)
    t = re.sub(r"\bma√±an\b", "ma√±ana", t, flags=re.IGNORECASE)
    t = re.sub(r"\bma√±na\b", "ma√±ana", t, flags=re.IGNORECASE)
    return t

def _parsear_lineas_a_items(texto: str):
    """
    Convierte l√≠neas 'YYYY-MM-DD HH:MM ‚Üí Texto' en [{'fecha','hora','texto'}].
    Ignora l√≠neas que no coincidan.
    """
    items = []
    if not isinstance(texto, str):
        return items
    for linea in texto.splitlines():
        m = re.match(r"\s*(\d{4}-\d{2}-\d{2})\s+(\d{2}:\d{2})\s*‚Üí\s*(.+)\s*$", linea)
        if m:
            items.append({"fecha": m.group(1), "hora": m.group(2), "texto": m.group(3)})
    return items

# =========================
# INT√âRPRETE (GPT)
# =========================
def consultar_mesa_gpt(texto: str) -> str:
    """
    Interpreta el mensaje del usuario.
    - Si es agenda: devuelve un comando /... para Orbis.
    - Si NO es agenda: responde en lenguaje natural (sin consultar Orbis).
    """
    try:
        hoy_dt = ahora_bogota()
        hoy = hoy_dt.strftime("%Y-%m-%d")
        respuesta = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Eres MesaGPT, el asistente personal de Doctor Mesa.\n"
                        f"Hoy es {hoy} (America/Bogota).\n\n"
                        "TU OBJETIVO:\n"
                        "- Eres el cerebro. Orbis es solo el cuaderno/agenda.\n"
                        "- Si el mensaje es de AGENDA, responde EXCLUSIVAMENTE con un comando v√°lido para Orbis.\n"
                        "- Si NO es de AGENDA, conversa de forma natural y √∫til (no uses comandos).\n\n"
                        "REGLAS AGENDA:\n"
                        "- Comandos v√°lidos:\n"
                        "  /agenda\n"
                        "  /registrar YYYY-MM-DD HH:MM Tarea\n"
                        "  /borrar YYYY-MM-DD HH:MM\n"
                        "  /borrar_fecha YYYY-MM-DD\n"
                        "  /borrar_todo\n"
                        "  /buscar Nombre\n"
                        "  /buscar_fecha YYYY-MM-DD\n"
                        "  /cuando Nombre\n"
                        "  /reprogramar YYYY-MM-DD HH:MM NUEVA_FECHA NUEVA_HORA\n"
                        "  /modificar YYYY-MM-DD HH:MM Nuevo texto\n"
                        "- Si el usuario escribe directamente un comando (empieza con '/'), resp√≥ndelo tal cual.\n"
                        "- Con 'ma√±ana' usa fecha = (hoy + 1 d√≠a); con 'hoy' usa fecha = hoy. (No inventes otras interpretaciones.)\n"
                        "- 'No estoy seguro a qu√© cita te refieres' SOLO se usa si el usuario pide borrar/modificar con referencias ambiguas como 'borra esa/esto' SIN contexto reciente. Para saludos o temas no agenda, NO uses esa frase.\n\n"
                        "REGLAS CONVERSACI√ìN NO AGENDA:\n"
                        "- Responde como humano, claro y breve. Si el usuario pide organizar el d√≠a, prop√≥n un plan y AL FINAL pregunta si deseas que lo agende en Orbis.\n"
                    )
                },
                {"role": "user", "content": texto}
            ]
        )
        return respuesta.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå Error consultando a MesaGPT:", str(e), flush=True)
        return "Lo siento, tuve un problema interpretando el mensaje. ¬øPuedes repetirlo?"

# =========================
# Descarga & Transcripci√≥n de voz
# =========================
def descargar_archivo(file_id: str, nombre: str) -> str | None:
    try:
        meta = requests.get(f"{TELEGRAM_API}/getFile", params={"file_id": file_id}).json()
        file_path = meta["result"]["file_path"]
        file_url = f"https://api.telegram.org/file/bot{BRIDGE_TOKEN}/{file_path}"
        data = requests.get(file_url)
        with open(nombre, "wb") as f:
            f.write(data.content)
        return nombre
    except Exception as e:
        print("‚ùå Error descargando archivo:", str(e), flush=True)
        return None

def transcribir_audio(file_path: str) -> str:
    try:
        with open(file_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file
            )
        return transcript.text.strip()
    except Exception as e:
        print("‚ùå Error transcribiendo audio:", str(e), flush=True)
        return ""

# =========================
# Texto ‚Üí Voz (gTTS) y env√≠o
# =========================
def preparar_texto_para_audio(texto: str) -> str:
    """
    Limpia el texto para TTS:
    - Elimina s√≠mbolos y emojis.
    - Normaliza fechas 15/09/2025 -> '15 de septiembre de 2025' y 15/09 -> '15 de septiembre'.
    - Convierte horas 24h (10:00, 13:05, 20.30) a 12h con 'de la ma√±ana/tarde/noche'.
    - Evita leer puntuaci√≥n innecesaria.
    """
    # 1) Quitar emojis/s√≠mbolos (dejamos solo letras, n√∫meros y espacios)
    limpio = re.sub(r"[^A-Za-z√Å√â√ç√ì√ö√ú√°√©√≠√≥√∫√º√ë√±0-9\s/.:]", " ", texto)

    # 2) Normalizar flechas, guiones, bullets, par√©ntesis y otros signos frecuentes a espacio
    limpio = re.sub(r"[()‚Üí‚Üê‚Üë‚Üì‚ûú‚û°Ô∏è‚¨ÖÔ∏è‚û§‚ûî‚Ä¢¬∑_\-\*=\[\]{}<>|#%~\"']", " ", limpio)

    # 3) Fechas dd/mm/yyyy ‚Üí '15 de septiembre de 2025' y dd/mm ‚Üí '15 de septiembre'
    def _mes(n):
        return ["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"][n-1]

    limpio = re.sub(
        r"\b(\d{1,2})/(\d{1,2})/(\d{4})\b",
        lambda m: f"{int(m.group(1))} de {_mes(int(m.group(2)))} de {m.group(3)}",
        limpio
    )
    limpio = re.sub(
        r"\b(\d{1,2})/(\d{1,2})\b",
        lambda m: f"{int(m.group(1))} de {_mes(int(m.group(2)))}",
        limpio
    )

    # 4) Horas HH:MM o HH.MM ‚Üí 12h natural
    def conv_hora(m):
        h = int(m.group(1))
        mnt = int(m.group(2))
        if h == 0:
            h12, suf = 12, "de la noche"
        elif h < 12:
            h12, suf = h, "de la ma√±ana"
        elif h == 12:
            h12, suf = 12, "del mediod√≠a"
        elif h < 19:
            h12, suf = h - 12, "de la tarde"
        else:
            h12, suf = h - 12, "de la noche"

        if mnt == 0:
            # m√°s natural que ‚Äúdoce de la tarde‚Äù ‚Üí ‚Äúdoce en punto de la tarde‚Äù
            return f"{h12} en punto {suf}"
        elif mnt < 10:
            # ‚Äútres y 5 de la tarde‚Äù
            return f"{h12} y {mnt} {suf}"
        else:
            # ‚Äútres {mnt} de la tarde‚Äù
            return f"{h12} {mnt} {suf}"

    limpio = re.sub(r"\b(\d{1,2})[:.](\d{2})\b", conv_hora, limpio)

    # 5) Quitar dobles signos/puntos/dos puntos y espacios repetidos
    limpio = re.sub(r"[,:;.\-]{2,}", " ", limpio)
    limpio = re.sub(r"\s+", " ", limpio).strip()

    return limpio

def enviar_audio(chat_id: int | str, texto: str):
    try:
        texto_para_leer = preparar_texto_para_audio(texto)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
            mp3_path = Path(tmp.name)
        tts = gTTS(text=texto_para_leer, lang="es")
        tts.save(str(mp3_path))

        with open(mp3_path, "rb") as f:
            requests.post(
                f"{TELEGRAM_API}/sendAudio",
                data={"chat_id": chat_id, "title": "Respuesta"},
                files={"audio": f}
            )
        print(f"üéß Audio MP3 enviado a chat {chat_id}", flush=True)
    except Exception as e:
        print("‚ùå Error enviando audio:", str(e), flush=True)
        requests.post(BRIDGE_API, json={"chat_id": chat_id, "text": texto})
    finally:
        try:
            if mp3_path and mp3_path.exists():
                mp3_path.unlink()
        except Exception:
            pass

# =========================
# Alarmas (Orbis ‚Üí Telegram)
# =========================
def enviar_alarma(chat_id: int | str, mensaje: str, prefer_audio: bool = False):
    """
    Env√≠a un recordatorio/alarma al usuario.
    Si prefer_audio=True, lo env√≠a como nota de voz (gTTS).
    Si no, lo env√≠a como texto normal.
    """
    try:
        if prefer_audio:
            enviar_audio(chat_id, f"‚è∞ Recordatorio: {mensaje}")
        else:
            requests.post(
                BRIDGE_API,
                json={"chat_id": chat_id, "text": f"‚è∞ Recordatorio: {mensaje}"}
            )
        print(f"‚úÖ Alarma enviada a {chat_id}: {mensaje}", flush=True)
    except Exception as e:
        print("‚ùå Error enviando alarma:", str(e), flush=True)

# =========================
# Endpoint principal (control GPT)
# =========================
@app.route("/mesa", methods=["POST"])
def mesa():
    data = request.get_json(force=True)
    chat_id       = data.get("chat_id")
    orden         = data.get("orden", "")
    prefer_audio  = bool(data.get("prefer_audio", False))

    if not chat_id or not orden:
        return jsonify({"error": "Falta chat_id u orden"}), 400

    try:
        # 0) Normalizar texto de usuario (errores comunes)
        orden = normalizar_manjana(orden)
        txt_low = orden.lower()

        # Preferencias de salida por texto
        if any(k in txt_low for k in [" en audio", "nota de voz", "mensaje de voz"]):
            prefer_audio = True
        if " en texto" in txt_low:
            prefer_audio = False

        # 1) ¬øConfirma algo pendiente con un ‚Äús√≠‚Äù/‚Äúno‚Äù?
        if chat_id in PENDIENTE:
            pend = PENDIENTE[chat_id]
            if es_si(txt_low):
                # Ejecutar la intenci√≥n pendiente
                if pend.get("tipo") == "buscar_fecha" and pend.get("fecha") == "manana":
                    comando = f"/buscar_fecha {fecha_bogota(1)}"
                elif pend.get("tipo") == "buscar_fecha" and pend.get("fecha") == "hoy":
                    comando = f"/buscar_fecha {fecha_bogota(0)}"
                else:
                    comando = pend.get("comando")

                PENDIENTE.pop(chat_id, None)

                # Consultar Orbis en modo JSON, redactar natural y responder
                r = requests.post(ORBIS_API, json={"texto": comando, "chat_id": chat_id, "modo": "json"})
                try:
                    datos_orbis = r.json()
                except Exception:
                    datos_orbis = {"ok": False, "error": "respuesta_no_json"}

                print(f"üì¶ Datos de Orbis (confirmado): {datos_orbis}", flush=True)

                if isinstance(datos_orbis, dict) and datos_orbis.get("ok") and datos_orbis.get("items"):
                    ULTIMA_AGENDA[chat_id] = datos_orbis["items"]
                # Si Orbis devolvi√≥ texto plano en "respuesta", intentamos extraer items
                elif isinstance(datos_orbis, dict) and isinstance(datos_orbis.get("respuesta"), str):
                    parsed = _parsear_lineas_a_items(datos_orbis["respuesta"])
                    if parsed:
                        ULTIMA_AGENDA[chat_id] = parsed


                contenido_json = json.dumps(datos_orbis, ensure_ascii=False) if isinstance(datos_orbis, dict) else str(datos_orbis)
                respuesta_natural = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": ("Eres el asistente de Doctor Mesa. Redacta en lenguaje natural, claro y breve, "
                                                       "usando SOLO los datos de Orbis. No inventes. Si no hay citas, dilo.")},
                        {"role": "user", "content": f"Petici√≥n confirmada por el usuario: {orden}"},
                        {"role": "user", "content": f"Datos de Orbis (JSON o texto): {contenido_json}"}
                    ]
                )
                texto_final = respuesta_natural.choices[0].message.content.strip()
                if prefer_audio: enviar_audio(chat_id, texto_final)
                else: requests.post(BRIDGE_API, json={"chat_id": chat_id, "text": texto_final})
                return jsonify({"ok": True})

            elif es_no(txt_low):
                PENDIENTE.pop(chat_id, None)
                msg = "Listo, no consulto la agenda. ¬øQuieres que te proponga un plan para ma√±ana?"
                if prefer_audio: enviar_audio(chat_id, msg)
                else: requests.post(BRIDGE_API, json={"chat_id": chat_id, "text": msg})
                return jsonify({"ok": True})
            # Si no es un ‚Äús√≠/no‚Äù, seguimos flujo normal sin borrar el pendiente.

        # 2) Heur√≠stica: si el usuario menciona 'ma√±ana' + (agenda|citas), crear PENDIENTE y pedir confirmaci√≥n
        if ("ma√±ana" in txt_low) and (("agenda" in txt_low) or ("citas" in txt_low)):
            PENDIENTE[chat_id] = {"tipo": "buscar_fecha", "fecha": "manana"}
            msg = "¬øQuieres que consulte en Orbis tus citas de ma√±ana?"
            if prefer_audio: enviar_audio(chat_id, msg)
            else: requests.post(BRIDGE_API, json={"chat_id": chat_id, "text": msg})
            return jsonify({"ok": True})

        # 3) GPT interpreta (cerebro primero)
        interpretacion = consultar_mesa_gpt(orden)
        print(f"ü§ñ MesaGPT interpret√≥: {orden} ‚Üí {interpretacion}", flush=True)

        # Respuesta de ambig√ºedad para saludos u off-topic ‚Üí reemplazar por saludo humano
        if interpretacion.startswith("‚ö†Ô∏è No estoy seguro") and not re.search(r"\b(borra|borrar|modificar|reprogramar|cambiar)\b", txt_low):
            interpretacion = "¬°Aqu√≠ estoy! Te escucho. ¬øEn qu√© te ayudo?"

        # 4) ¬øEs comando de agenda?
        comando = None
        if interpretacion.startswith("/"):
            comando = interpretacion
        else:
            m = re.search(r"(/[\w_]+.*)", interpretacion)
            if m:
                comando = m.group(1)

        # Correcci√≥n: si el LLM devolvi√≥ /agenda pero el usuario dijo ‚Äúma√±ana‚Äù
        if comando and comando.startswith("/agenda") and "ma√±ana" in txt_low:
            comando = f"/buscar_fecha {fecha_bogota(1)}"

        if comando:
            # Sanitizar
            comando = comando.strip()
            comando = re.sub(r"^[\s'\"`]+|[\s'\"`]+$", "", comando)
            comando = comando.replace("/.", "/").strip()

            # Confirmaci√≥n para /borrar_todo
            if comando.startswith("/borrar_todo") and "confirmar" not in comando:
                msg = "‚ö†Ô∏è ¬øSeguro que deseas borrar TODA la agenda? Responde con '/borrar_todo confirmar'."
                if prefer_audio: enviar_audio(chat_id, msg)
                else: requests.post(BRIDGE_API, json={"chat_id": chat_id, "text": msg})
                return jsonify({"ok": True})

            # Consultar Orbis (modo JSON; si Orbis viejo, devolver√° 'respuesta' texto)
            r = requests.post(ORBIS_API, json={"texto": comando, "chat_id": chat_id, "modo": "json"})
            try:
                datos_orbis = r.json()
            except Exception:
                datos_orbis = {"ok": False, "error": "respuesta_no_json"}

            print(f"üì¶ Datos de Orbis: {datos_orbis}", flush=True)

            # Guardar √∫ltima agenda
            if isinstance(datos_orbis, dict) and datos_orbis.get("ok") and datos_orbis.get("items"):
                ULTIMA_AGENDA[chat_id] = datos_orbis["items"]

            # Redacci√≥n natural (segunda pasada GPT)
            contenido_json = json.dumps(datos_orbis, ensure_ascii=False) if isinstance(datos_orbis, dict) else str(datos_orbis)
            respuesta_natural = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": ("Eres el asistente de Doctor Mesa. Redacta en lenguaje natural, claro y breve, "
                                                   "usando SOLO los datos de Orbis. No inventes.")},
                    {"role": "user", "content": f"Mensaje del usuario: {orden}"},
                    {"role": "user", "content": f"Datos de Orbis (JSON o texto): {contenido_json}"}
                ]
            )
            texto_final = respuesta_natural.choices[0].message.content.strip()

            if prefer_audio: enviar_audio(chat_id, texto_final)
            else: requests.post(BRIDGE_API, json={"chat_id": chat_id, "text": texto_final})

        else:
            # 5) No es agenda ‚Üí GPT conversa normal (y puede proponer plan y luego ofrecer agendar)
            if prefer_audio:
                enviar_audio(chat_id, interpretacion)
            else:
                requests.post(BRIDGE_API, json={"chat_id": chat_id, "text": interpretacion})

    except Exception as e:
        print("‚ùå Error en /mesa:", str(e), flush=True)
        return jsonify({"error": str(e)}), 500

    return jsonify({"ok": True})

# =========================
# Webhook de Telegram
# =========================
@app.route("/", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    if "message" not in data:
        return {"ok": True}

    msg     = data["message"]
    chat_id = msg["chat"]["id"]

    # ‚úÖ Global ANTES de asignar
    global LAST_CHAT_ID
    LAST_CHAT_ID = chat_id

    # Texto ‚Üí respondo en texto
    if "text" in msg:
        text = msg["text"]
        print(f"üì© Telegram ‚Üí Doctor (texto): {text}", flush=True)
        payload = {"chat_id": chat_id, "orden": text, "prefer_audio": False}

    # Voz (mensaje de voz) ‚Üí respondo en audio
    elif "voice" in msg:
        file_id = msg["voice"]["file_id"]
        print(f"üé§ Telegram ‚Üí Doctor (voz): {file_id}", flush=True)
        ogg_path = descargar_archivo(file_id, "voz.ogg")
        transcripcion = transcribir_audio(ogg_path) if ogg_path else ""
        print(f"üìù Transcripci√≥n: {transcripcion}", flush=True)
        payload = {"chat_id": chat_id, "orden": transcripcion or "(audio vac√≠o)", "prefer_audio": True}

    # Video note ‚Üí tambi√©n respondo en audio
    elif "video_note" in msg:
        file_id = msg["video_note"]["file_id"]
        print(f"üé• Telegram ‚Üí Doctor (video_note): {file_id}", flush=True)
        mp4_path = descargar_archivo(file_id, "nota_video.mp4")
        transcripcion = transcribir_audio(mp4_path) if mp4_path else ""
        print(f"üìù Transcripci√≥n (video_note): {transcripcion}", flush=True)
        payload = {"chat_id": chat_id, "orden": transcripcion or "(audio vac√≠o)", "prefer_audio": True}

    else:
        return {"ok": True}

    # Redirigir internamente a /mesa
    with app.test_request_context("/mesa", method="POST", json=payload):
        return mesa()

# =========================
# Healthcheck
# =========================
@app.route("/ping", methods=["GET"])
def ping():
    return "‚úÖ BridgeBot activo en Render"

# =========================
# Scheduler de alertas
# =========================
def revisar_agenda_y_enviar_alertas():
    """
    Consulta a Orbis si hay eventos pr√≥ximos y manda recordatorios por Telegram (audio).
    """
    try:
        # Si a√∫n no tenemos un chat_id de Telegram, no intentamos notificar
        if LAST_CHAT_ID is None:
            return

        # Pedimos pr√≥ximos eventos a Orbis y le pasamos el chat_id
        r = requests.post(ORBIS_API, json={"texto": "/proximos", "chat_id": LAST_CHAT_ID})
        if r.status_code != 200:
            print("‚ö†Ô∏è Orbis no respondi√≥ correctamente", flush=True)
            return

        eventos = r.json().get("eventos", [])
        for ev in eventos:
            chat_id = ev.get("chat_id") or LAST_CHAT_ID
            mensaje = ev.get("mensaje") or ev.get("texto")
            if chat_id and mensaje:
                enviar_alarma(chat_id, mensaje, prefer_audio=True)

    except Exception as e:
        print("‚ùå Error revisando agenda:", str(e), flush=True)

def iniciar_scheduler():
    if os.getenv("ENABLE_SCHEDULER", "1") != "1":
        print("‚è≠Ô∏è Scheduler desactivado por ENABLE_SCHEDULER", flush=True)
        return
    schedule.every(1).minutes.do(revisar_agenda_y_enviar_alertas)
    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(1)
    threading.Thread(target=run_scheduler, daemon=True).start()

